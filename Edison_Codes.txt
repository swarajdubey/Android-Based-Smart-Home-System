// Chong Rui Zheng, 010889
// For H54GP4

#include <Servo.h>
#include <SPI.h>
#include <WiFi.h>
#include <TimerOne.h>
#include "rgb_lcd.h"
#include <stdlib.h>
#include <string.h>
#include <TH02_dev.h>
#include <HttpClient.h>
#include <Wire.h>

#define CMDSTR_MAX_LEN (128)
#define LOW_TEMP       (10)
#define NOM_TEMP       (25)
#define HIGH_TEMP      (40)

#define _INTERVAL      (50)
#define BLUETOOTH
#ifdef BLUETOOTH
#include <Intel_Edison_BT_SPP.h>
#endif

#define lightPin 5
#define fanPin 6
#define RELAY1 A4
#define RELAY2 A5

#define SENSOR_COUNT   (6)
#define ACTUATOR_COUNT (4)
#define VAR1_COUNT     (SENSOR_COUNT+1)
#define VAR2_COUNT     (ACTUATOR_COUNT+1)
typedef void (*pActuatorHandler)(int);
typedef int (*pgetSensorValue)(void);

rgb_lcd lcd;
boolean isBackLightOn = true;
char cmdstr[CMDSTR_MAX_LEN];


int getTempSensorValue();
int getSoundSensorValue();
int getHumiSensorValue();
int getMoistrueSensorValue();
int getLightSensorValue();
int getUVSensorValue();
int getPIRSensorValue();

void RelayHandle(int val);
void BuzzerHandle(int val);
void ServoHandle(int val);
void SleepHandle(int val);

char ssid[6] = "osxyz";           // your network SSID (name)
char psw[48] = "66552925";       // your network password
boolean isSSIDreconfiged = false;

int keyIndex = 0;                // your network key Index number (needed only for WEP)
int status = WL_IDLE_STATUS;

unsigned char BLColorRGB[] = {0x00, 0x00, 0xFF}; //Backlight color

const int numRows = 2;
const int numCols = 16;

const int MenuCount = 5;
int MenuIndex = 0;

const int MoistrueSensorIndex = 0;
const int LightSensorIndex = 1;
const int UVSensorIndex = 2;
const int THSensorIndex = 3;
const int LocalIPIndex = 4;

const int pinSound = A0;
const int pinMoistrue = A1;
const int pinLight = A2;
const int pinUV = A3;
const int pinButton = 0;
const int pinEncoder1 = 2;
const int pinEncoder2 = 3;
const int pinBuzzer = 4;
const int pinRelay = 8;
const int pinPIR = 7;
const int pinServo = 3;
Servo myservo;

const char* SerialVarList1[] = { "temp", "humi", "light", "uv", "pir", "ms", "ssid"};
const char* SerialVarList2[] = { "relay", "buzzer", "servo", "sleep", "psw"};
enum ACTUATOR {RELAY = 0, BUZZER, SERVO, SLEEP};
enum SENSOR {TEMPER = 0, HUMI, BRIGHTNESS, UV, PIR, MS};

const char host[] = "www.eeeonlinecourse.com";
const char path[] = "/FYP_15-16/get_context_info_for_edison.php"; //"/FYP_15-16/receive_contexts.php";
const char path2[] = "/FYP_15-16/receive_sensordata.php";
long int counter = 0;
int success = 0;
bool busy = false;

#ifdef BLUETOOTH
//Bluetooth
Intel_Edison_BT_SPP spp = Intel_Edison_BT_SPP();
bool BT_reading = false;
#endif
String lookup[4] = {"light", "{\"light\":", "fan", "{\"fan\":"};

// RGB lights
int counting = 0;
bool increase = true;
int RGBvalues[3] = {0};

WiFiClient client;
HttpClient http(client);

int light = 0, fan = 0;
enum OUTPUTS {LIGHT = 0, FAN};
int currentSetting[2] = {0};
bool autoLight = true, autoFan = true;

pgetSensorValue getSensorValueList[] = {
  getTempSensorValue,
  getHumiSensorValue,
  getLightSensorValue,
  getUVSensorValue,
  getPIRSensorValue,
  getMoistrueSensorValue
};

int SensorValue[SENSOR_COUNT] = {0};

pActuatorHandler ActuatorHandlerList[] = {RelayHandle, BuzzerHandle, ServoHandle, SleepHandle};

int SensorConfig[][4] = {       // value, condition, Actuator, action
  {85,  '>', SLEEP,  1},        //Temperature
  {100, '>', SLEEP,  1},        //Humdity
  {200, '<', SLEEP,  1},        //Light
  {1023, '>', SLEEP,  1},       //UV
  {2,   '=', BUZZER, 1},        //PIR
  {600, '<', RELAY,  1}         //Moistrue
};

// prints the sensors to actuators setting
void printSettings(void) {
  Serial.println("The Sensors Configurations as follow:");
  for (int i = 0; i < SENSOR_COUNT; i++) {
    Serial.print(SerialVarList1[i]);
    Serial.write((char)SensorConfig[i][1]);
    Serial.print(SensorConfig[i][0]);
    Serial.write(',');
    Serial.print(SerialVarList2[SensorConfig[i][2]]);
    Serial.write('=');
    Serial.println(SensorConfig[i][3]);
  }
  Serial.print('\n');
  Serial.print("SSID = ");
  Serial.print(ssid);
  Serial.print(", PSW = ");
  Serial.println(psw);

  Serial.println("The Sensors Value as follow:");
  for (int i = 0; i < SENSOR_COUNT; i++) {
    Serial.print(i + 1);
    Serial.print(": ");
    Serial.print(SerialVarList1[i]);
    Serial.print(" = ");
    Serial.println(getSensorValueList[i]());
  }
}

//get Grove-Sound Sensor value
int getSoundSensorValue() {
  return analogRead(pinSound);
}
//get Temperature Senso value
int getTempSensorValue() {
  int temper = (int) TH02.ReadTemperature();
  SensorValue[TEMPER] = temper;
  return temper;
}

//get Humidity Senso value
int getHumiSensorValue() {
  int humidity = (int)TH02.ReadHumidity();
  SensorValue[HUMI] = humidity;
  return humidity;
}

//get Grove-Moistrue Sensor value
int getMoistrueSensorValue() {
  return (SensorValue[MS] = analogRead(pinMoistrue));
}
//get Grove-Light Sensor value
int getLightSensorValue() {
  return (SensorValue[BRIGHTNESS] = analogRead(pinLight));
}
//get Grove-UV Sensor value
int getUVSensorValue() {
  return (SensorValue[UV] = analogRead(pinUV));
}

//Grove PIR Motion Sensor
int getPIRSensorValue() {
  return (SensorValue[PIR] = digitalRead(pinPIR));
}


//display Temperature&Humidity Senso value on LCD
void displayTHSensorValue() {
  lcd.clear();
  lcd.print(" Temp&Humidity  ");
  lcd.setCursor(0, 1);
  lcd.print("<-");
  char number[16];
  sprintf(number, "%d", getTempSensorValue());
  lcd.setCursor(3, 1);
  lcd.print(number);
  lcd.print("C");
  sprintf(number, "%d", getHumiSensorValue());
  lcd.setCursor(9, 1);
  lcd.print(number);
  lcd.print("%");
  lcd.setCursor(numCols - 2, 1);
  lcd.print("->");
}

//display Grove-Moistrue Sensor value on LCD
void displayMoistrueSensorValue() {
  lcd.clear();
  lcd.print("Moisture Sensor ");
  char number[16];
  int len = sprintf(number, "%d", getMoistrueSensorValue());
  lcd.setCursor(0, 1);
  lcd.print("<-");
  lcd.setCursor((numCols - len) / 2, 1);
  lcd.print(number);
  lcd.setCursor(numCols - 2, 1);
  lcd.print("->");
}

//display Grove-Light Sensor value on LCD
void displayLightSensorValue() {
  lcd.clear();
  lcd.print("  Light Sensor  ");
  char number[16];
  int len = sprintf(number, "%d", getLightSensorValue());
  lcd.setCursor(0, 1);
  lcd.print("<-");
  lcd.setCursor((numCols - len) / 2, 1);
  lcd.print(number);
  lcd.setCursor(numCols - 2, 1);
  lcd.print("->");
}

//display Grove-UV Sensor value on LCD
void displayUVSensorValue() {
  lcd.clear();
  lcd.print("   UV Sensor    ");
  char number[16];
  int len = sprintf(number, "%d", getUVSensorValue());
  lcd.setCursor(0, 1);
  lcd.print("<-");
  lcd.setCursor((numCols - len) / 2, 1);
  lcd.print(number);
  lcd.setCursor(numCols - 2, 1);
  lcd.print("->");
}

//display local ip
void displayLocalIP() {
  IPAddress ip = WiFi.localIP();
  char local_ip[16];
  sprintf(local_ip, "%d.%d.%d.%d", ip[0], ip[1], ip[2], ip[3]);
  local_ip[15] = '\0';
  lcd.clear();
  lcd.print("    Local IP    ");
  lcd.setCursor(0, 1);
  lcd.print(local_ip);
}


//is button pressed
int isButtonPressed() {
  int state = 0;
  if (digitalRead(pinButton)) {
    while (digitalRead(pinButton));
    state = 1;
  }
  return state;
}

// sets the relay output
void RelayHandle(int val) {
  if (val == 1) {
    digitalWrite(pinRelay, HIGH);
  }
  else if (val == 0) {
    digitalWrite(pinRelay, LOW);
  }
}
void BuzzerHandle(int val) {
  if (!(val == 0 || val == 1)) return;
  if (val == 1)
    digitalWrite(pinBuzzer, HIGH);
  else if (val == 0)
    digitalWrite(pinBuzzer, LOW);
}
void ServoHandle(int val) {
  static unsigned long curt = millis();
  if (millis() - curt > 1000) {
    myservo.write(val);
    curt = millis();
  }
}

void SleepHandle(int val) {
  return;
}

int cmdstrInput(char *str) {
  static int index = 0;
  if (Serial.available()) {
    char inChar = Serial.read();
    cmdstr[index++] = inChar;
    if (inChar == '\n' || index >= CMDSTR_MAX_LEN) {
      cmdstr[index - 1] = '\0';
      index = 0;
      return 1;
    }
  }
  return 0;
}

// handles any serial request inputted through the Arduino IDE Serial Monitor
void SerialRequestHandler() {
  if (cmdstrInput(cmdstr)) {
    Serial.println(cmdstr);
    if (!parsecmd(cmdstr)) {
      Serial.println("  ---- FAIL!");
      Serial.println("Please enter command: set temp>50,relay=1 etc.");
    }
    else {
      Serial.println("  ---- OK!");
    }
    printSettings();
  }
  int changedVal;
  if (BT_reading == false) {
    for (int i = 0; i < SENSOR_COUNT; i++) {
      if (SensorConfig[i][2] == SERVO) changedVal = 0;
      else changedVal = !SensorConfig[i][0];
      switch (SensorConfig[i][1]) {
        case '>':
          if (getSensorValueList[i]() > SensorConfig[i][0])
            ActuatorHandlerList[SensorConfig[i][2]](SensorConfig[i][3]);
          else ActuatorHandlerList[SensorConfig[i][2]](changedVal);
          break;
        case '<':
          if (getSensorValueList[i]() < SensorConfig[i][0])
            ActuatorHandlerList[SensorConfig[i][2]](SensorConfig[i][3]);
          else ActuatorHandlerList[SensorConfig[i][2]](changedVal);
          break;
        case '=':
          if (getSensorValueList[i]() == SensorConfig[i][0])
            ActuatorHandlerList[SensorConfig[i][2]](SensorConfig[i][3]);
          else ActuatorHandlerList[SensorConfig[i][2]](changedVal);
          break;
      }
    }
  }
}

// Command matching
int parsecmd(char *cmd) {
  char* cp = cmd;

  /*  // use SSID and Passwrod, should not changed to lowcase
    while(*cp != '\0'){
      if(*cp >= 'A' && *cp <= 'Z') *cp += 0x20;     //tolower
      cp++;
    }
  */

  if (!(cmd[0] == 's' && cmd[1] == 'e' && cmd[2] == 't' && cmd[3] == ' ')) return 0; //Illegal cmd

  char tmpcmd[CMDSTR_MAX_LEN];
  char *cp1 = cmd + 4;
  int len = 0;
  while (*cp1 != '\0') {
    if (*cp1 != ' ') tmpcmd[len++] = *cp1;  //delete space
    cp1++;
  }
  tmpcmd[len] = '\0';
  if (len < 7) return 0; // at least 7 characters,like T>0,R=1

  char *pvar1, *pvar2;
  pvar1 = strtok(tmpcmd, ",");
  if (pvar1 == NULL) return 0;         //no setting
  pvar2 = strtok(NULL, ",");
  if (pvar2 == NULL) return 0;         //no setting
  if (strtok(NULL, ",") != NULL) return 0; //more setting

  char op1 = '\0', op2 = '\0';
  char *pvarvalue1 = NULL, *pvarvalue2 = NULL;
  int i = 0;
  while (pvar1[i] != '\0') {
    if (pvar1[i] == '>' || pvar1[i] == '<' || pvar1[i] == '=') {
      op1 = pvar1[i];
      pvar1[i] = '\0';
      pvarvalue1 = pvar1 + i + 1;
      break;
    }
    i++;
  }
  i = 0;
  while (pvar2[i] != '\0') {
    if (pvar2[i] == '>' || pvar2[i] == '<' || pvar2[i] == '=') {
      op2 = pvar2[i];
      pvar2[i] = '\0';
      pvarvalue2 = pvar2 + i + 1;
      break;
    }
    i++;
  }
  int varindex1, varindex2;
  for (i = 0; i < VAR1_COUNT; i++)
    if (strcmp(pvar1, SerialVarList1[i]) == 0) {
      varindex1 = i;
      break;
    }

  if (i == VAR1_COUNT) return 0; // Illegal sensor name

  for (i = 0; i < VAR2_COUNT; i++)
    if (strcmp(pvar2, SerialVarList2[i]) == 0) {
      varindex2 = i;
      break;
    }

  if (i == VAR2_COUNT) return 0; // Illegal actuator name

  if (op1 == '\0' || op2 == '\0') return 0; // Illegal operator name

  if (varindex1 == VAR1_COUNT - 1 && varindex2 == VAR2_COUNT - 1) {
    strcpy(ssid, pvarvalue1);
    strcpy(psw, pvarvalue2);
    isSSIDreconfiged = true;
  }
  else if (varindex1 != VAR1_COUNT - 1 && varindex2 != VAR2_COUNT - 1) {
    int value1 = atoi(pvarvalue1), value2 = atoi(pvarvalue2);
    if (value1 < 0 || value1 > 1023) return 0;
    if (value2 < 0 || value2 > 1023) return 0;
    SensorConfig[varindex1][0] = value1;
    SensorConfig[varindex1][1] = op1;
    SensorConfig[varindex1][2] = varindex2;
    SensorConfig[varindex1][3] = value2;
  }

  return 1;
}

// Codes for the encoder knob
void EncoderISR() {
  while (!digitalRead(pinEncoder2));
  if (digitalRead(pinEncoder1) == HIGH) {
    MenuIndex++;
    if (MenuIndex >= MenuCount) MenuIndex = 0;
  } else {
    MenuIndex--;
    if (MenuIndex < 0) MenuIndex = MenuCount - 1;
  }
}

// handles wifi request
void connect_wifi() {
  // attempt to connect to Wifi network:
  while (status != WL_CONNECTED) {
    Serial.print("\nAttempting to connect to SSID: ");
    Serial.println(ssid);
    // Connect to WPA/WPA2 network. Change this line if using open or WEP network:
    status = WiFi.begin(ssid, psw);

    // wait 10 seconds for connection:
    delay(10000);
  }
  Serial.println("Connected to wifi");
  printWifiStatus();
}

// display menu on the LCD screen
void displayMenu() {
  static unsigned long curtime = millis();
  if (millis() - curtime > 1000) {
    //noInterrupts();
    switch (MenuIndex) {
      case (THSensorIndex):
        displayTHSensorValue();
        break;
      case (MoistrueSensorIndex):
        displayMoistrueSensorValue();
        break;
      case (UVSensorIndex):
        displayUVSensorValue();
        break;
      case (LightSensorIndex):
        displayLightSensorValue();
        break;
      case (LocalIPIndex):
        displayLocalIP();
        break;
    }
    curtime = millis();
    //interrupts();
  }
}

// sets the RGB colors of the LCD based on the current temperature
void TempColorHandle() {
  int temp = SensorValue[0];
  if (temp != 0) {
    if (!isBackLightOn) {
      lcd.setRGB(0, 0, 0);
      return;
    }
    if (temp < LOW_TEMP) {
      BLColorRGB[0] = 0x00;
      BLColorRGB[1] = 0x00;
      BLColorRGB[2] = 0xFF;
    }
    else if (temp < NOM_TEMP) {
      BLColorRGB[0] = 0x00;
      BLColorRGB[1] = map(temp, LOW_TEMP, NOM_TEMP - 1, 0, 255);
      BLColorRGB[2] = map(temp, LOW_TEMP, NOM_TEMP - 1, 255, 0);
    }
    else if (temp < HIGH_TEMP) {
      BLColorRGB[0] = map(temp, NOM_TEMP, HIGH_TEMP - 1, 0, 255);
      BLColorRGB[1] = map(temp, NOM_TEMP, HIGH_TEMP - 1, 255, 0);
      BLColorRGB[2] = 0x00;
    }
    else {
      BLColorRGB[0] = 0xFF;
      BLColorRGB[1] = 0x00;
      BLColorRGB[2] = 0x00;
    }
    lcd.setRGB(BLColorRGB[0], BLColorRGB[1], BLColorRGB[2]);
  }
}



//initialize wifi connection
void WiFi_Init() {
  // check for the presence of the shield:
  if (WiFi.status() == WL_NO_SHIELD) {
    Serial.println("WiFi shield not present");
    // don't continue:
    while (true);
  }

  String fv = WiFi.firmwareVersion();
  if ( fv != "1.1.0" )
    Serial.println("Please upgrade the firmware");
}

// print the WiFi connection status using serialport
void printWifiStatus() {
  // print the SSID of the network you're attached to:
  Serial.print("SSID: ");
  Serial.println(WiFi.SSID());

  // print your WiFi shield's IP address:
  IPAddress ip = WiFi.localIP();
  Serial.print("IP Address: ");
  Serial.println(ip);

  // print the received signal strength:
  long rssi = WiFi.RSSI();
  Serial.print("signal strength (RSSI):");
  Serial.print(rssi);
  Serial.println(" dBm");
}

// creates a Bluetooth thread to handle the Bluetooth serial SPP requests
void create_BT_Thread() {
  pthread_t BTThread;
  delay(200);
  if (pthread_create(&BTThread, NULL, BT_read, (void*)0))
    Serial.println("Error: Unable to create thread");
  else
    pthread_detach(BTThread);   //detach the thread so the OS can clean it up when done
  /*
    // music
    pthread_t musicThread;
    if (pthread_create(&musicThread, NULL, playMusic, (void*)0))
      Serial.println("Error: Unable to create thread");
    else
      pthread_detach(musicThread);   //detach the thread so the OS can clean it up when done
      */
}

// function that handles the Bluetooth serial SPP requests
#ifdef BLUETOOTH
void* BT_read (void *x)
{
  spp.open();
  delay(100);
  while (1) {
    int result = -1;

    ssize_t BT_size = spp.read();
    Serial.println("[BLUETOOTH] Read done");
    if (BT_size != -1) {    // message received
      if (busy == false) {
        bool BT_reading = true;
        String readText;
        int lookup_ptr = -1;
        readText = spp.getBuf();
        Serial.println("[BLUETOOTH] Message received at BT:");
        Serial.println(readText);

        do {
          lookup_ptr += 2;
          if (lookup_ptr < 4) {
            int pin;

            // decodes the message received
            result = decode(readText, lookup[lookup_ptr]);
            if (result != -1) {
              Serial.print("Decoded ");
              Serial.print(lookup[lookup_ptr - 1]);
              Serial.print(": ");
              Serial.println(result);
              switch ((lookup_ptr + 1) / 2)
              {
                case 1:
                  pin = lightPin;
                  light = result;
                  autoLight = false;
                  break;
                case 2:
                  pin = fanPin;
                  fan = result;
                  autoFan = false;
                  break;
              }
              if (result <= 255 && result >= 0) transientChg(((lookup_ptr + 1) / 2) - 1);
              else if (result == 256) {
                Serial.print("Setting ");
                Serial.print(lookup[lookup_ptr - 1]);
                Serial.println(" to auto mode...");
                switch ((lookup_ptr + 1) / 2)
                {
                  case 1:
                    autoLight = true;
                    break;
                  case 2:
                    autoFan = true;
                    break;
                }
              }
            }
          }
          else break;
        } while (result == -1);

        if (result = -1) {
          if (readText == (String)"\"walking\"") {
            Serial.println("User is taking a walk.");
          }
          else if (readText == (String)"\"resting\"") {
            Serial.println("User is taking a rest.");
            autoLight = false;
            light = 0;
            transientChg(LIGHT);
          }
        }
        Serial.println();
        BT_reading = false;
      }
      else Serial.println("Nothing happened");
    }
  }
}

// plays music to the bluetooth speaker
void* playMusic (void* x)
{
  system("gst-launch-1.0 filesrc location= /media/Wave/6.wav ! wavparse ! pulsesink");
}

// function that decodes the json request
int decode(String recvString, String key)
{
  unsigned int curs = 0, index = 0;
  //String key[2] = {"\"action_id\":\"", "\"state\":\""};
  String num = "0123456789";
  int digit = 0;
  int ans = -1;

  bool found = false;
  int count = 0; //action[7][2] = {0},
  while (curs < recvString.length() && found == false) {
    index = 0;
    while (recvString[curs] == key[index] && found == false) {
      curs++;
      index++;
      if (index == key.length()) found = true;
      // else if (index == key[1].length()) if (recvString[curs] == 't') action[count - 1][1] = 1;
      // match found, cursor is pointed at the value
    }
    if (found == false) curs++;
  }
  if (found == true) {
    //Serial.print("Cursor = ");
    //Serial.print(curs);
    //Serial.println(": ");
    while (compare(recvString[curs], num, num.length())) {
      digit++;
      //Serial.print(recvString[curs]);

      if (digit == 1) ans = recvString[curs] - '0';
      else if (digit == 2) ans = ans * 10 + (int)(recvString[curs] - '0');
      else ans = ans * 10 + (int)(recvString[curs] - '0');

      curs++;
    }
    //Serial.println();
  }
  //Serial.println(ans);
  return ans;
}

int compare (char c, String num, int len)
{
  int count = 0;

  while (count < len) {
    if (c == num[count]) return 1;
    count++;
  }

  return 0;
}
#endif

// lighting effect for the RGB LCD
void Lights(void)
{
  if (!isBackLightOn) {
    lcd.setRGB(0, 0, 0);
    return;
  }
  int increment = random(5, 20);
  counting = random(0, 3);
  if (increase == true) RGBvalues[counting] += increment;
  else RGBvalues[counting] -= increment;

  if (RGBvalues[counting] > 255 && increase == true) {
    RGBvalues[counting] = 255;

    int temp = counting;
    while (counting == temp) counting = random(0, 3);

    if (RGBvalues[counting] == 255) increase = false;
    else if (RGBvalues[counting] == 10) increase = true;
  }
  else if (RGBvalues[counting] < 10 && increase == false) {
    RGBvalues[counting] = 10;

    int temp = counting;
    while (counting == temp) counting = random(0, 3);

    if (RGBvalues[counting] == 255) increase = false;
    else if (RGBvalues[counting] == 10) increase = true;
  }
  if (RGBvalues[counting] == 129) RGBvalues[counting] = 128;
  else if (RGBvalues[counting] == 226) RGBvalues[counting] = 225;
  lcd.setRGB(RGBvalues[0], RGBvalues[1], RGBvalues[2]);
  //delay(50);
}

// checks the online server for changes in values as well as posting the
// temperature and humidity sensor values
void checkServer(void)
{
  busy = true;

  int count = 0;
  char recvString[430];
  char c;

  Serial.println("\nGetting...");

  http.flush();

  if (!(http.get(host, path)))
  {
    Serial.print("\nStarted request no. ");
    Serial.print(++success);
    Serial.println(":");
again:
    if (http.available()) {
      (void)http.skipResponseHeaders();

      while (http.available()) {
        c = http.read();
        Serial.print(c);
        if (count < 430) {
          recvString[count] = c;
          count++;
        }
      }
    }
    else goto again;

    Serial.println();
    //decode((String)recvString, (String)"\"action_id\":\"");
    http.stop();
    //while (1);
  }
  else Serial.println("Connect failed");

  postData();
  Serial.println("\nLeft");
  busy = false;
  counter = 0;
}

// handles the HTTPPOST request to the cloud
void postData()
{
  char c;
  Serial.println("\nPosting...");

  http.flush();
  if (!(http.post(host, path2))) {
    http.sendHeader("Content-Type", "application/x-www-form-urlencoded");

    String msg = "temp=", msg2 = "&humid=";
    http.sendHeader("Content-Length", 4 + msg.length() + msg2.length());
    Serial.print("\nContent: ");
    http.print(msg);
    Serial.print(msg);
    http.print(SensorValue[0]);
    Serial.print(SensorValue[0]);
    http.print(msg2);
    Serial.print(msg2);
    http.println(SensorValue[1]);
    Serial.println(SensorValue[1]);

    Serial.println("Waiting for Response..");

repeat:
    if (http.available()) {
      (void) http.skipResponseHeaders();
      while (http.available()) {
        c = http.read();
        Serial.print(c);
      }
      Serial.println();
    }
    else goto repeat;

    http.stop();
  }
  else Serial.println("Connect failed");
}

// automatically changes the light/fan output based on the sensor input
void autoModeHandler()
{ /*
   if (autoLight) {
     delay(10);
     Serial.println("Auto light");
   }
   if (autoFan) {
     delay(10);
     Serial.println("Auto fan");
   }
  */
  if (autoLight) {
    if (SensorValue[2] < 100) light = 255;
    else if (SensorValue[2] < 200) light = 200;
    else if (SensorValue[2] < 300) light = 150;
    else if (SensorValue[2] < 400) light = 100;
    else if (SensorValue[2] < 500) light = 50;
    else if (SensorValue[2] < 600) light = 1;
    else light = 0;

    if (currentSetting[LIGHT] != light) transientChg(LIGHT);
  }
  if (autoFan) {
    if (SensorValue[0] > 35) fan = 255;
    else if (SensorValue[0] > 33) fan = 200;
    else if (SensorValue[0] > 30) fan = 150;
    else if (SensorValue[0] > 27) fan = 100;
    else if (SensorValue[0] > 23) fan = 50;
    else if (SensorValue[0] > 18) fan = 10;
    else fan = 0;

    if (currentSetting[FAN] != fan) transientChg(FAN);
  }
}

// transiently change the lighting/fan output
void transientChg(int mode)
{
  int intendedSetting = 0, pin = 0;
  bool autoMode;
  if (mode == LIGHT) {
    intendedSetting = light;
    pin = lightPin;
    autoMode = autoLight;
  }
  else if (mode == FAN) {
    intendedSetting = fan;
    pin = fanPin;
    autoMode = autoFan;
  }

  Serial.print("Setting ");
  Serial.print(lookup[mode * 2]);
  Serial.print(" to ");

  if (autoMode) {
    if (currentSetting[mode] < intendedSetting - 5) currentSetting[mode] += 5;
    else if (currentSetting[mode] > intendedSetting + 5) currentSetting[mode] -= 5;
    else currentSetting[mode] = intendedSetting;
    analogWrite(pin, currentSetting[mode]);
    Serial.print((float)currentSetting[mode] * (float)100 / (float)255);
  }
  else {
    analogWrite(pin, intendedSetting);
    currentSetting[mode] = intendedSetting;
    Serial.print((float)intendedSetting * (float)100 / (float)255);
  }
  Serial.println("%");
  //delay(100);
}

// setup codes for whenever the sketch is run
void setup()
{
  Serial.begin(115200);
  // set up the LCD's number of columns and rows:
  lcd.begin(16, 2);

  WiFi_Init();

  pinMode(pinButton, INPUT);
  pinMode(pinRelay, OUTPUT);
  pinMode(pinBuzzer, OUTPUT);
  pinMode(pinEncoder1, INPUT);
  pinMode(pinEncoder2, INPUT);
  pinMode(fanPin, OUTPUT);
  pinMode(lightPin, OUTPUT);
  analogWrite(lightPin, 0);
  delay(50);
  analogWrite(fanPin, 0);
  delay(50);
  //myservo.attach(pinServo);
  //myservo.write(0);
  digitalWrite(pinRelay, LOW);
  digitalWrite(pinBuzzer, LOW);
  delay(50);

  printSettings();

  //connect_wifi();

#ifdef BLUETOOTH
  // checks Bluetooth
  create_BT_Thread();
  delay(200);
#endif

// initialize timer to check encoder status
  Timer1.initialize(20000); // set a timer of length 2000 microseconds
  //Timer1.attachInterrupt(timerIsr); // attach the service routine here
  attachInterrupt(pinEncoder2, EncoderISR, FALLING);
  /*
    pthread_t myThread;
    if (pthread_create(&myThread, NULL, checkServer, (void*)0))
      Serial.println("Error: Unable to create thread");
    else
      pthread_detach(myThread);   //detach the thread so the OS can clean it up when done*/
  checkServer();
  //analogWrite(fanPin, 255);
  //analogWrite(lightPin, 255);
  //while(1);
}



void loop()
{
  TempColorHandle();

  displayMenu();

  SerialRequestHandler();

  autoModeHandler();

  if (counter == _INTERVAL) {
    counter = 0; checkServer();
    //if (busy == false) {
    //if (BT_reading == false)
    /*pthread_t myThread;
    if (pthread_create(&myThread, NULL, checkServer, (void*)0))
      Serial.println("Error: Unable to create thread");
    else
      pthread_detach(myThread);   //detach the thread so the OS can clean it up when done
      */
    //}
  }
  counter++;

  //if button pressed, backlight transforms
  if (isButtonPressed()) isBackLightOn = !isBackLightOn;
  //if reconfig WiFi SSID,reconnect.

  if (isSSIDreconfiged == true) {
    status = WL_IDLE_STATUS;
    isSSIDreconfiged = false;
  }
}